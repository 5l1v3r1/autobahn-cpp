FROM armhf/debian:stretch

COPY .qemu/qemu-arm-static /usr/bin/qemu-arm-static

MAINTAINER The Crossbar.io Project <support@crossbario.com>

# Metadata
ARG BUILD_DATE
ARG AUTOBAHN_CPP_VERSION
ARG AUTOBAHN_CPP_VCS_REF

# Metadata labeling
LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="AutobahnCpp Starter Template" \
      org.label-schema.description="Quickstart template for application development with AutobahnCpp" \
      org.label-schema.url="http://crossbar.io" \
      org.label-schema.vcs-ref=$AUTOBAHN_CPP_VCS_REF \
      org.label-schema.vcs-url="https://github.com/crossbario/autobahn-cpp" \
      org.label-schema.vendor="The Crossbar.io Project" \
      org.label-schema.version=$AUTOBAHN_CPP_VERSION \
      org.label-schema.schema-version="1.0"

# Crossbar.io connection defaults
ENV CBURL ws://crossbar:8080/ws
ENV CBREALM realm1

# user env
ENV DEBIAN_FRONTEND noninteractive
ENV HOME /usr/local/app
ENV PATH /usr/local/app:$PATH
ENV LD_LIBRARY_PATH /usr/local/lib
RUN mkdir -p /usr/local/app

# env vars to configure websocketpp
ENV WSPP_ENABLE_CPP11 1

# update system, get dev tools and libs
RUN apt-get update \
    && apt-get install -y wget curl unzip git-core \
                          clang libc++1 libc++-dev libc++abi-dev \
                          build-essential autotools-dev autoconf libtool cmake scons \
                          zlib1g-dev libbz2-dev libssl-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# use clang, not gcc
ENV CC /usr/bin/clang
ENV CXX /usr/bin/clang++
RUN    update-alternatives --install /usr/bin/cc cc /usr/bin/clang 100 \
    && update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++ 100 \
    && update-alternatives --query c++ \
    && update-alternatives --query cc

# get, build and install Boost from upstream
RUN cd /tmp \
    && wget http://downloads.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.bz2 \
    && tar xvjf boost_1_64_0.tar.bz2 && cd boost_1_64_0 \
    && ./bootstrap.sh --with-toolset=clang \
    && ./b2 toolset=clang cxxflags="-stdlib=libc++" linkflags="-stdlib=libc++" link=shared link=static threading=single threading=multi --layout=tagged --without-python -j 8 install \
    && cd / && rm -rf /tmp/boost*

# get, build and install msgpack-c from upstream
RUN cd /tmp \
    && wget https://github.com/msgpack/msgpack-c/archive/cpp-1.4.2.zip -O msgpack-c.zip \
    && unzip msgpack-c.zip && cd msgpack-c-cpp-1.4.2 \
    && export CXXFLAGS="$CXXFLAGS -std=c++11" \
    && ./bootstrap && ./configure && make install \
    && cd / && rm -rf /tmp/msgpack*

# get and install websocketpp from upstream
RUN cd /tmp \
    && wget https://github.com/zaphoyd/websocketpp/archive/0.7.0.zip -O websocketpp.zip \
    && unzip websocketpp.zip \
    && cp -r /tmp/websocketpp-0.7.0/websocketpp/ /usr/local/include/ \
    && cd / && rm -rf /tmp/websocketpp*

# get and install autobahn-cpp from upstream
RUN cd /tmp \
    && wget https://github.com/crossbario/autobahn-cpp/archive/v${AUTOBAHN_CPP_VERSION}.zip -O autobahn-cpp.zip \
    && unzip autobahn-cpp.zip \
    && cp -r /tmp/autobahn-cpp-${AUTOBAHN_CPP_VERSION}/autobahn/ /usr/local/include/ \
    && cp -r /tmp/autobahn-cpp-${AUTOBAHN_CPP_VERSION}/examples/ /usr/local/app/ \
    && cd / && rm -rf /tmp/autobahn* \
    && cd /usr/local/app/examples/ && scons


# drop into shell by default
CMD ["bash"]
